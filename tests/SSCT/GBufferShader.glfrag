
#version 330
#extension GL_ARB_shading_language_420pack : enable

#if 0 // dim ambient light
#	define DIFFUSE_MIN 0.15
#	define DIFFUSE_MAX 0.75
#else
#	define DIFFUSE_MIN 0.2
#	define DIFFUSE_MAX 1.0
#endif

layout(binding = 0) uniform sampler2D colorMap;
layout(binding = 1) uniform sampler2D normalMap;
layout(binding = 2) uniform sampler2D specularMap;

in vec3 vertexTangent;
in vec3 vertexBitangent;
in vec3 vertexNormal;
in vec2 vertexTexCoord;
in vec3 worldPos;

layout(location = 0) out vec4 colorOut;
layout(location = 1) out vec4 normalOut;
layout(location = 2) out vec4 depthOut;
layout(location = 3) out vec4 specularOut;

layout(std140) uniform pixelParam
{
	int		numTextures;		//!< Number of textures.
	float 	normalDeviation;	//!< Normal vector deviation. 0.0 -> No normal mapping, 1.0 -> full normal mapping.
};

float LightAttenuation(vec3 lightPos, float lightEnergy)
{
	float dist = distance(lightPos, worldPos);
	float attn0 = 1.0;
	float attn1 = dist * (1.0 / lightEnergy);
	float attn2 = dist * attn1;
	return 1.0 / (attn0 + attn1 + attn2);
}

float Illumination(vec3 normal, vec3 lightPos, float lightEnergy)
{
	vec3 lightDir = normalize(lightPos - worldPos);
	float NdotL = max(0.0, dot(normal, lightDir));
	return NdotL * LightAttenuation(lightPos, lightEnergy);
}

float SceneIllumination(vec3 normal)
{
	float shading = 0.0;
	
	#if 0
	
	vec3 lightDir = normalize(-vec3(0.3, -0.5, 1));
	//float NdotL = max(0.2, dot(normal, lightDir));
	shading = max(0.0, dot(normal, lightDir));
	
	#else
	
	shading += Illumination(normal, vec3(2.0, 1.47, 1.9), 15.0);
	shading += Illumination(normal, vec3(-4.1, 0.38, -6.0), 10.0);
	shading += Illumination(normal, vec3(2.24, 0.6, -6.0), 10.0);
	
	#endif
	
	return shading;
}

void main()
{
	// Sample normal vector
	vec3 normal = normalize(vertexNormal);
	
	if (numTextures >= 2 && normalDeviation > 0.0)
	{
		vec3 normalSample = normalize(texture(normalMap, vertexTexCoord).rgb*2.0 - 1.0);
		
		/* Transform normal into tangent space */
		mat3 tangentSpace = mat3(
			normalize(vertexTangent),
			normalize(vertexBitangent),
			normalize(vertexNormal)
		);
		
		normal = normalize(mix(normal, tangentSpace * normalSample, normalDeviation));
	}
	
	// Sample specular factor
	float specular = 0.0;
	
	if (numTextures >= 3)
		specular = texture(specularMap, vertexTexCoord).r;
	
	// Compute shading
	float shading = SceneIllumination(normal);
	
	// Get diffuse color
	vec4 diffuse = texture(colorMap, vertexTexCoord);
	
	diffuse.rgb *= mix(DIFFUSE_MIN, DIFFUSE_MAX, shading);
	
	// Set output values
	float depth = gl_FragCoord.z;
	
    colorOut	= diffuse;
	normalOut	= vec4(normal, 1.0);
	depthOut	= vec4(depth, depth, 0.0, 1.0);
	specularOut	= vec4(vec3(specular), 1.0);
}
